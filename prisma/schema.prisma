datasource db {
    provider = "postgresql"
    url      = env("NEXT_PUBLIC_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Role {
    USER
    ORGANISER
    ADMIN
    SUPERADMIN
}

model User {
    id            String    @id @default(cuid())
    email         String    @unique
    username      String?   @unique
    name          String?
    image         String?
    passwordHash  String?
    emailVerified DateTime?
    role          Role      @default(USER)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    accounts           Account[]
    sessions           Session[]
    comments           Comment[]
    createdEvents      Event[]              @relation("EventCreatedBy")
    createdVenues      Venue[]              @relation("VenueCreatedBy")
    PasswordResetToken PasswordResetToken[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    token   String   @unique
    userId  String
    expires DateTime
    used    Boolean  @default(false)
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
    id          String   @id @default(cuid())
    title       String
    description String
    imageURL    String
    start       String?
    end         String?
    date        DateTime @default(now())
    goto        String
    type        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    Venue   Venue?  @relation(fields: [venueId], references: [id])
    venueId String?

    location   Location? @relation(fields: [locationId], references: [id])
    locationId String?

    Comment Comment[]

    createdBy   User?   @relation("EventCreatedBy", fields: [createdById], references: [id])
    createdById String?
}

model Venue {
    id          String  @id @default(cuid())
    title       String
    description String
    imageURL    String
    type        String?
    openAT      String?
    closeAT     String?

    events     Event[]
    location   Location? @relation(fields: [locationId], references: [id])
    locationId String?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    Comment    Comment[]

    createdBy   User?   @relation("VenueCreatedBy", fields: [createdById], references: [id])
    createdById String?
}

model Location {
    id       String  @id @default(cuid())
    title    String
    lat      Float
    lng      Float
    imageURL String
    venues   Venue[]
    events   Event[]

    @@index([lat, lng])
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())

    author   User?   @relation(fields: [authorId], references: [id])
    authorId String?

    event   Event?  @relation(fields: [eventId], references: [id])
    eventId String?

    venue   Venue?  @relation(fields: [venueId], references: [id])
    venueId String?
}
